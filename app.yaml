AWSTemplateFormatVersion: '2010-09-09'
Description: EC2/application template for Sentia Academy
Parameters:
  BastionSubnet:
    Description: Bastion Subnet
    Type: String
  BastionHostSecurityGroup:
    Description: Bastion Security Group
    Type: String
  AutoScalingSecurityGroup:
    Description: Autoscaling Security Group
    Type: String
  LoadBalancerSecurityGroup:
    Description: Load Balancer Security Group
    Type: String
  AutoScalingSubnet:
    Description: AutoScaling Subnet
    Type: String
  AutoScalingPubSubnet:
    Description: Public Autoscaling Subnet
    Type: String
  AutoScalingPub2Subnet:
    Description: Public 2nd Autoscaling Subnet
    Type: String
  AutoScaling2Subnet:
    Description: AutoScaling 2 Subnet
    Type: String
  KeyName:
    Description: Keyname to use
    Type: String
  Ami:
    Description: Selected Ami from SkeletonStack
    Type: String
  Vpc:
    Description: Vpc from Skeleton Stack
    Type: String
  Sizing:
    Description: Sizing
    Type: String
Mappings:
  EnvironmentSize:
    Small:
      "EC2": "t2.micro"
      "DB": "db.t2.micro"
    Medium:
      "EC2": "db.t2.small"
      "DB": "db.t2.small"
    Large:
      "EC2": "db.t2.medium"
      "DB": "db.t2.medium"
Resources:
  LoadBalancer: #spawn a load balancer
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Subnets:
        - !Ref AutoScalingPubSubnet
        - !Ref AutoScalingPub2Subnet
      Type: application
      Tags:
        - Key: Name
          Value: Internet-Facing Application Loadbalancer
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
     DefaultActions:
       - Type: forward
         TargetGroupArn: !Ref ALBTargetGroup
     LoadBalancerArn: !Ref LoadBalancer
     Port: '80'
     Protocol: HTTP
  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
     HealthCheckIntervalSeconds: 60
     UnhealthyThresholdCount: 10
     HealthCheckPath: /
     Port: 80
     Protocol: HTTP
     VpcId: !Ref Vpc
     TargetGroupAttributes:
       - Key: deregistration_delay.timeout_seconds
         Value: 60
  BastionHostLaunchConfig: #create launch config for bastion host
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Properties:
        AssociatePublicIpAddress: true
        ImageId: !Ref Ami
        InstanceMonitoring: false
        InstanceType: t2.micro
        KeyName: !Ref KeyName
        PlacementTenancy: default
        SecurityGroups:
          - Ref: BastionHostSecurityGroup
  BastionHostScalingGroup: # create the asg with a bastion host
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName:
          Ref: BastionHostLaunchConfig
      MinSize: '1'
      MaxSize: '1'
      VPCZoneIdentifier:
        - !Ref BastionSubnet
      Tags:
        - Key: Name
          Value: Bastion host
          PropagateAtLaunch: true
Outputs:
  BastionHost:
    Description: Bastion created in skeleton
    Value: !Ref BastionHostScalingGroup
  LoadBalancer:
    Description: Endpoint of load balancer
    Value: !GetAtt 'LoadBalancer.DNSName'
