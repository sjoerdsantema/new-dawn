AWSTemplateFormatVersion: '2010-09-09'
Description: EC2/application template for Sentia Academy
Parameters:
  BastionSubnet:
    Description: Bastion Subnet
    Type: String
  BastionHostSecurityGroup:
    Description: Bastion Security Group
    Type: String
  AutoScalingSecurityGroup:
    Description: Autoscaling Security Group
    Type: String
  LoadBalancerSecurityGroup:
    Description: Load Balancer Security Group
    Type: String
  AutoScalingSubnet:
    Description: AutoScaling Subnet
    Type: String
  AutoScalingPubSubnet:
    Description: Public Autoscaling Subnet
    Type: String
  AutoScalingPub2Subnet:
    Description: Public 2nd Autoscaling Subnet
    Type: String
  AutoScaling2Subnet:
    Description: AutoScaling 2 Subnet
    Type: String
  KeyName:
    Description: Keyname to use
    Type: String
  Ami:
    Description: Selected Ami from SkeletonStack
    Type: String
  Vpc:
    Description: Vpc from Skeleton Stack
    Type: String
  Sizing:
    Description: Sizing
    Type: String
Mappings:
  EnvironmentSize:
    Small:
      "EC2": "t2.micro"
      "DB": "db.t2.micro"
    Medium:
      "EC2": "db.t2.small"
      "DB": "db.t2.small"
    Large:
      "EC2": "db.t2.medium"
      "DB": "db.t2.medium"
Resources:
  LoadBalancer: #spawn a load balancer
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
     Scheme: internet-facing
     SecurityGroups:
      - !Ref LoadBalancerSecurityGroup
     Subnets:
      - !Ref AutoScalingPubSubnet
      - !Ref AutoScalingPub2Subnet
     Type: application
     Tags:
      - Key: Name
        Value: Internet-Facing Application Loadbalancer
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
     DefaultActions:
       - Type: forward
         TargetGroupArn: !Ref ALBTargetGroup
     LoadBalancerArn: !Ref LoadBalancer
     Port: '80'
     Protocol: HTTP
  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
     HealthCheckIntervalSeconds: 60
     UnhealthyThresholdCount: 10
     HealthCheckPath: /
     Port: 80
     Protocol: HTTP
     VpcId: !Ref Vpc
     TargetGroupAttributes:
       - Key: deregistration_delay.timeout_seconds
         Value: 60
  BastionHostLaunchConfig: #create launch config for bastion host
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Properties:
     AssociatePublicIpAddress: true
     ImageId: !Ref Ami
     InstanceMonitoring: false
     InstanceType: t2.micro
     KeyName: !Ref KeyName
     PlacementTenancy: default
     SecurityGroups:
      - Ref: BastionHostSecurityGroup
  BastionHostScalingGroup: # create the asg with a bastion host
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
     LaunchConfigurationName:
      Ref: BastionHostLaunchConfig
     MinSize: '1'
     MaxSize: '1'
     VPCZoneIdentifier:
      - !Ref BastionSubnet
     Tags:
      - Key: Name
        Value: Bastion host
        PropagateAtLaunch: true
  AsgLaunchConfiguration: #create asg launch config
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          full_install: [install_cfn, install_app, verify_instance_health]
        install_cfn:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
               [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource LaunchConfig --configsets full_install --region ${AWS::Region}
                runas=root
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files: [/etc/cfn/cfn-hup.conf, /etc/cfn/hooks.d/cfn-auto-reloader.conf]
        install_app:
          packages:
            yum:
              httpd: []
          files:
            /var/www/html/index.html:
              content: !Join
                - ''
                - - '<h1>Congratulations, you have successfully launched the AWS CloudFormation sample.</h1>'
                  - '<p>Version: 1.0</p>'
              mode: '000644'
              owner: root
              group: root
          services:
            sysvinit:
              httpd:
                enabled: 'true'
                ensureRunning: 'true'
        verify_instance_health:
          commands:
            ELBHealthCheck:
              command: !Sub
                'until [ "$state" == "\"InService\"" ]; do state=$(aws --region ${AWS::Region} elb describe-instance-health
                 --load-balancer-name ${LoadBalancer}
                 --instances $(curl -s http://169.254.169.254/latest/meta-data/instance-id)
                 --query InstanceStates[0].State); sleep 10; done'
    Properties:
     AssociatePublicIpAddress: false
     IamInstanceProfile: !Ref LogMetricsCloudWatchProfile
     ImageId: !Ref Ami
     InstanceMonitoring: true
     InstanceType:
      !FindInMap [EnvironmentSize, !Ref Sizing, EC2] #find in mappings corresponding ec2 size
     KeyName: !Ref KeyName
     UserData:
        "Fn::Base64":
          !Sub |
           #!/bin/bash
           yum update -y
           yum install -y aws-cfn-bootstrap
           /opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource LaunchConfig --configsets full_install --region ${AWS::Region}
           /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource WebServerGroup --region ${AWS::Region}
     PlacementTenancy: default
     SecurityGroups:
      - !Ref AutoScalingSecurityGroup
  AutoScalingGroup: #spawn auto-scaling group
    Type: AWS::AutoScaling::AutoScalingGroup
    UpdatePolicy:
     AutoScalingRollingUpdate:
      MaxBatchSize: '1'
      MinInstancesInService: '1'
      PauseTime: PT15M
      WaitOnResourceSignals: 'true'
    Properties:
      LaunchConfigurationName: !Ref AsgLaunchConfiguration
      MinSize: 2
      MaxSize: 4
      TargetGroupARNs:
        - !Ref ALBTargetGroup
      VPCZoneIdentifier:
        - !Ref AutoScalingSubnet
        - !Ref AutoScaling2Subnet
      Tags:
        - Key: Name
          Value: Webserver
          PropagateAtLaunch: true
  ScaleUpPolicy: #scaling policy
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
     AdjustmentType: ChangeInCapacity
     AutoScalingGroupName: !Ref AutoScalingGroup
     Cooldown: '1'
     ScalingAdjustment: '1'
  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
     EvaluationPeriods: '1'
     Statistic: Average
     Threshold: '10'
     AlarmDescription: Alarm if CPU too high or metric disappears indicating instance is down
     Period: '60'
     AlarmActions:
      - !Ref ScaleUpPolicy
     Namespace: AWS/EC2
     Dimensions:
      - Name: AutoScalingGroup
        Value: !Ref AutoScalingGroup
     ComparisonOperator: GreaterThanThreshold
     MetricName: CPUUtilization
  LogMetricsCloudWatchRole: #create cloudwatch role
    Type: AWS::IAM::Role
    Properties:
     AssumeRolePolicyDocument:
      Version: 2012-10-17
      Statement:
        - Effect: Allow
          Principal:
            Service:
              - ec2.amazonaws.com
          Action:
            - sts:AssumeRole
     Path: "/"
  LogMetricsCloudWatchPolicy: #create cloudwatch policy
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: LogMetricsCloudWatchPolicy
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - cloudwatch:PutMetricdata
              - ec2:DescribeTags
              - logs:PutLogEvents
              - logs:DescribeLogStreams
              - logs:DescribeLogGroups
              - logs:CreateLogStreams
              - logs:CreateLogGroup
            Resource: "*"
          - Effect: Allow
            Action:
              - s3:GetObject
            Resource: arn:aws:s3:::one-sentia-course/*
      Roles:
        - !Ref LogMetricsCloudWatchRole
  LogMetricsCloudWatchProfile: #link cloudwatch role to profile
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref LogMetricsCloudWatchRole
Outputs:
  BastionHost:
    Description: Bastion created in skeleton
    Value: !Ref BastionHostScalingGroup
  LoadBalancer:
    Description: Endpoint of load balancer
    Value: !GetAtt 'LoadBalancer.DNSName'
